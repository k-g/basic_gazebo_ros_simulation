<launch>

    
    <arg name="spawn_robot" default="true" />
    
    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="extra_gazebo_args" default=""/>
    <arg name="gui" default="true"/>
    <arg name="recording" default="false"/>
    <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="physics" default="ode"/>
    <arg name="verbose" default="false"/>
    <!-- <arg name="world_name" default="worlds/empty.world"/> -->
    <arg name="world_name" default="$(find simulator)/gazebo/worlds/basic_with_objects.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
    <arg name="robot_xacro" default="$(find simulator)/urdf/basic.xacro"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
    <arg name="respawn_gazebo" default="false"/>
    <arg name="use_clock_frequency" default="false"/>
    <arg name="pub_clock_frequency" default="100"/>
    <arg name="enable_ros_network" default="true" />


    <!-- set use_sim_time flag -->
    <param name="/use_sim_time" value="$(arg use_sim_time)"/>

    <!-- set command arguments -->
    <arg unless="$(arg paused)" name="command_arg1" value=""/>
    <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
    <arg unless="$(arg recording)" name="command_arg2" value=""/>
    <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
    <arg unless="$(arg verbose)" name="command_arg3" value=""/>
    <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
    <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
    <arg     if="$(arg debug)" name="script_type" value="debug"/>

    <group if="$(arg spawn_robot)">

        <!-- Load XACRO file of robot model into parameter server-->
        <param name="robot_description" command="xacro --inorder $(arg robot_xacro)" />

        <!-- Spawn a robot into Gazebo -->
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model basic" />
    </group>

    <!-- start gazebo server-->
    <group if="$(arg use_clock_frequency)">
        <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
    </group>
    <group>
        <param name="gazebo/enable_ros_network" value="$(arg enable_ros_network)" />
    </group>
    
    <node   name="gazebo" 
            pkg="gazebo_ros" 
            type="$(arg script_type)" 
            respawn="$(arg respawn_gazebo)" 
            output="screen"
            args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" >

            <!-- <remap from="odom" to="wheel_odom"/> -->

    </node>

    <!-- start gazebo client -->
    <group if="$(arg gui)">
        <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen" args="$(arg command_arg3)"/>
    </group>



      <!-- Publish all joint states to the TF tree -->
    <!--   
      <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
      </node>
   -->

</launch>
